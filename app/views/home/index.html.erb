<div id="info">
  <p id="info_no_speech">No speech was detected. You may need to adjust your
    <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
      microphone settings</a>.</p>
  <p id="info_no_microphone" style="display:none">
    No microphone was found. Ensure that a microphone is installed and that
    <a href="//support.google.com/chrome/bin/answer.py?hl=en&amp;answer=1407892">
      microphone settings</a>
    are configured correctly.</p>
  <p id="info_denied">Permission to use microphone was denied.</p>
  <p id="info_blocked">Permission to use microphone is blocked. To change, go to chrome://settings/contentExceptions#media-stream</p>
  <p id="info_upgrade">Web Speech API is not supported by this browser. Upgrade to
    <a href="//www.google.com/chrome">Chrome</a>
    version 25 or later.</p>
</div>
<div class="right">
  <button id="start_button" onclick="startButton(event)"></div>
  <div class="chat">
    <div class="chat-title">
      <h1>Ava</h1>
      <h2>Online</h2>
      <figure class="avatar">
        <img src="<%= asset_path 'logo_ava.png'%>"/></figure>
    </div>
    <div class="messages">
      <div class="messages-content"></div>
    </div>
    <div class="message-box">
      <textarea type="text" class="message-input" placeholder="Type message..."></textarea>
      <button type="submit" class="message-submit" onclick="startButton(event)">Mic</button>
    </div>

  </div>
  <div class="bg"></div>
  <script>
    var $messages,
      capitalize,
      current_style,
      d,
      final_transcript,
      first_char,
      h,
      i,
      ignore_onend,
      insertMessage,
      linebreak,
      m,
      message,
      one_line,
      recognition,
      recognizing,
      setDate,
      showButtons,
      showInfo,
      startButton,
      start_timestamp,
      two_line,
      updateScrollbar,
      client,
      upgrade;
    final_transcript = '';
    recognizing = false;
    ignore_onend = void 0;
    start_timestamp = void 0;
    client = new ApiAi.ApiAiClient({accessToken: '480d1ad1c9e64adc958020025ca8c348'});
    upgrade = function () {
      showInfo('info_upgrade');
    };
    linebreak = function (s) {
      return s.replace(two_line, '<p></p>').replace(one_line, '<br>');
    };
    capitalize = function (s) {
      return s.replace(first_char, function (m) {
        return m.toUpperCase();
      });
    };
    startButton = function (event) {
      if (recognizing) {
        recognition.stop();
        return;
      }
      final_transcript = '';
      recognition.lang = 'en-US';
      recognition.start();
      ignore_onend = false;
      showButtons('none');
      start_timestamp = event.timeStamp;
    };
    showInfo = function (s) {
      var child;
      if (s) {
        child = info.firstChild;
        while (child) {
          if (child.style) {
            child.style.display = child.id === s
              ? 'inline'
              : 'none';
          }
          child = child.nextSibling;
        }
        info.style.visibility = 'visible';
      } else {
        info.style.visibility = 'hidden';
      }
    };
    showButtons = function (style) {
      var current_style;
      if (style === current_style) {
        return;
      }
      current_style = style;
    };
    updateScrollbar = function () {
      $messages.mCustomScrollbar('update').mCustomScrollbar('scrollTo', 'bottom', {
        scrollInertia: 10,
        timeout: 0
      });
    };
    reminder = function (response) {
      if (response.result.action=='alarm.confirm') {
        var base_url = window.location.href.split('#')[0];
        var api_url = base_url+'api/v1';
        var params = response.result.contexts[0].parameters;
        var data = { date : params.date, time : params.time, name : params.name, recurrence: params.recurrence };
        $.ajax({
          type: "POST",
          url: api_url+'/reminders',
          data: data,
          dataType: 'application/json'
        });
      }
    }
    nameStuff = function (response) {
      var base_url = window.location.href.split('#')[0];
      var api_url = base_url+'api/v1';
      if (response.result.action=='name.user.get') {
        var request = $.ajax({
          type: "GET",
          url: api_url+'/name',
          dataType: 'application/json',
          async: false
        });
        if (JSON.parse(request.responseText).name=='' || JSON.parse(request.responseText).name==null){
          answers = ['I don\'t know you yet :(',
          'You haven\'t told me your name yet :(',
          'You haven\'t told me your that yet',
          'You gotta tell me that first.']
          pick = Math.floor(Math.random() * (answers.length - 1 + 1)) + 1;
          response.result.fulfillment.speech = answers[pick];
        }else{
          var r = response.result.fulfillment.speech;
          response.result.fulfillment.speech = r + ' ' + JSON.parse(request.responseText).name;
        }
      } else if (response.result.action=='name.user.save' || response.result.action=='name.user.change' || response.result.action=='name.user.confirm'){
        var name = response.result.parameters.name
        var data = { name: name };
        var request = $.ajax({
          type: "POST",
          url: api_url+'/name',
          data: data,
          dataType: 'application/json',
        });
        answers = ['Okey Dokey '+ name+'.',
        'I\'ll remember that '+name+'.',
        'Thanks '+ name + ' for telling me your name.',
        'Sure thing '+name+'.'];
        pick = Math.floor(Math.random() * (answers.length - 1 + 1)) + 1;
        response.result.fulfillment.speech = answers[pick];
      }
    }
    setDate = function () {
      var d,
        m;
      d = new Date;
      if (m !== d.getMinutes()) {
        m = d.getMinutes();
        $('<div class="timestamp">' + d.getHours() + ':' + m + '</div>').appendTo($('.message:last'));
      }
    };
    insertMessage = function (msg, client) {
      var client,
        handleResponse,
        promise,
        response;
      if (msg == null) {
        msg = '';
      }
      response = '';
      handleResponse = function (response) {
        reminder(response);
        nameStuff(response);
        $('<div class="message message-personal">' + msg + '</div>').appendTo($('.mCSB_container')).addClass('new');
        setDate();
        $('.message-input').val(null);
        updateScrollbar();
        message(response);
      };
      if (msg === '') {
        msg = $('.message-input').val();
      }
      if ($.trim(msg) === '') {
        return false;
      }
      promise = client.textRequest(msg);
      promise.then(handleResponse);
    };
    message = function (response) {
      var speech;
      if (response == null) {
        response = '';
      }
      if (response) {
        speech = response.result.fulfillment.speech;
      }
      if ($('.message-input').val() !== '') {
        return false;
      }
      $('<div class="message loading new"><figure class="avatar"><img src="https://image.ibb.co/nvjPWv/logo_ava.png" /></figure><span></span></div>').appendTo($('.mCSB_container'));
      updateScrollbar();
      setTimeout((function () {
        var synth,
          utterThis;
        $('.message.loading').remove();
        synth = window.speechSynthesis;
        utterThis = new SpeechSynthesisUtterance(speech);
        utterThis.rate = 1;
        utterThis.lang = 'en-US';
        synth.speak(utterThis);
        $('<div class="message new"><figure class="avatar"><img src="https://image.ibb.co/nvjPWv/logo_ava.png" /></figure>' + speech + '</div>').appendTo($('.mCSB_container')).addClass('new');
        setDate();
        updateScrollbar();
        i++;
      }), 1000 + Math.random() * 20 * 100);
    };

    if (!('webkitSpeechRecognition' in window)) {
      upgrade();
    } else {
      recognition = new webkitSpeechRecognition;
      recognition.continuous = false;
      recognition.interimResults = true;
      recognition.onstart = function () {
        recognizing = true;
      };
      recognition.onerror = function (event) {
        if (event.error === 'no-speech') {
          showInfo('info_no_speech');
          ignore_onend = true;
        }
        if (event.error === 'audio-capture') {
          showInfo('info_no_microphone');
          ignore_onend = true;
        }
        if (event.error === 'not-allowed') {
          if (event.timeStamp - start_timestamp < 100) {
            showInfo('info_blocked');
          } else {
            showInfo('info_denied');
          }
          ignore_onend = true;
        }
      };
      recognition.onend = function () {
        recognizing = false;
        if (ignore_onend) {
          return;
        }
        if (!final_transcript) {
          return;
        }
        showInfo('');
      };
      recognition.onresult = function (event) {
        var i,
          interim_transcript;
        interim_transcript = '';
        i = event.resultIndex;
        while (i < event.results.length) {
          if (event.results[i].isFinal) {
            final_transcript += event.results[i][0].transcript;
          } else {
            interim_transcript += event.results[i][0].transcript;
          }
          ++i;
        }
        final_transcript = capitalize(final_transcript);
        insertMessage(final_transcript, client);
        if (final_transcript || interim_transcript) {
          showButtons('inline-block');
        }
      };
    }
    two_line = /\n\n/g;
    one_line = /\n/g;
    first_char = /\S/;
    current_style = void 0;
    $messages = $('.messages-content');
    d = void 0;
    h = void 0;
    m = void 0;
    i = 0;
    $('.message-submit').click(function () {
      insertMessage('', client);
    });
    $(window).on('keydown', function (e) {
      if (e.which === 13) {
        insertMessage('',client);
        return false;
      }
    });
    $(window).load(function () {
      $('<div class="message loading new"><figure class="avatar"><img src="https://image.ibb.co/nvjPWv/logo_ava.png" /></figure><span></span></div>').appendTo($('.mCSB_container'));
      $messages.mCustomScrollbar();
      var response;
      promise = client.textRequest('start');
      handleResponse = function (response) {
        sessionId = response.sessionId;
        message(response);
      };
      promise.then(handleResponse);
    });
  </script>
